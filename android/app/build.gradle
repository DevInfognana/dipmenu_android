plugins {
    id "com.android.application"
    id "org.jetbrains.kotlin.android"
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader -> localProperties.load(reader) }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode') ?: '1'
def flutterVersionName = localProperties.getProperty('flutter.versionName') ?: '1.0'

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    namespace = "com.velvetcream.dip" // REQUIRED for AGP 8+
    compileSdk = 36
    ndkVersion = "27.0.12077973"

    defaultConfig {
        applicationId "com.velvetcream.dip"
        minSdk = flutter.minSdkVersion
        targetSdk = 36
        versionCode = 7
        versionName = "2.0.6"
        multiDexEnabled true
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
        coreLibraryDesugaringEnabled = true
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_17.toString()
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lint {
        checkReleaseBuilds false
        abortOnError false
        disable += ['InvalidPackage','Instantiatable']
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

flutter {
    source '../..'
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += [
            "-Xlint:deprecation", // Show deprecated API usage
            "-Xlint:unchecked", // Show unchecked operations warnings
            "-Xlint:-options" // Suppress obsolete -options warning
    ]
    options.warnings = false
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:2.0.21"
    def multidex_version = "2.0.1"
    implementation "androidx.multidex:multidex:$multidex_version"
    coreLibraryDesugaring "com.android.tools:desugar_jdk_libs:2.1.4"
}